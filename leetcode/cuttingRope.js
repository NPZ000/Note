//给你一根长度为 n 的绳子，请把绳子剪成整数长度的 m 段（m、n都是整数，n>1并且m>1），每段绳子的长度记为 k[0],k[1]...k[m-1] 。请问 k[0]*k[1]*...*k[m-1] 可能的最大乘积是多少？例如，当绳子的长度是8时，我们把它剪成长度分别为2、3、3的三段，此时得到的最大乘积是18。
// 2 <= n <= 58
/**
 * 动态规划
 * dp 数组保存乘积的记录
 * dp[i] 表示程度为 i 时的最大乘积 
 * 需要两层循环 外层循环为绳子的长度 内层循环为第一🔪要切的长度，长度为 1 的话对后面没有任何意义，所以从 2 开始
 */

function cutRope(n) {
    // 肯定要切一刀的 所以dp数组长度为 n + 1
    // 这里要注意的是不能只初始化出来一个空的数组 然后给一个索引为 2 位置上的值，因为下面的逻辑还会取 2 前面的值，
    const dp = Array(n + 1).fill(0)
    // 题目约定长度最小是 2，为 2 的话 只能是 1 * 1，所以 dp[2] = 1
    dp[2] = 1
    for (let i = 3; i <= n; i++) {
        // 切第一刀长度为 2
        for (let j = 2; j < i; j++) {
            // 切了第一刀之后是否还要再切
            const cut = j * dp[i - j] // 还要切的情况 就乘dp数组里当长度为i-j的最大乘积
            const notCut = j * (i - j) // 不切的情况 直接乘剩下的长度
            const max = Math.max(cut, notCut) // 取两种情况的最大值
            dp[i] = Math.max(dp[i], max) // 取 j 为不同值时的最大值
        }
    }
    return dp[n]
}

// 如果要对结果求模的话 就不能用动态规划解法了，因为求模之后再比较max就不对了
// 贪心解法
// 每次都切长度为3就是最优解
function cut(n) {
    if (n < 4) {
        return n - 1
    }
    let res = 1
    while (n > 4) {
        res *= 3 % 1000000007
        n -= 3
    }
    return (res * n) % 1000000007
}